use crate::error::ZackstrapError;
use crate::generators::{ConfigGenerator, ProjectType};
use colored::*;
use std::path::PathBuf;

pub struct CommandHandler {
    target_dir: PathBuf,
    force: bool,
    fail_on_exists: bool,
    dry_run: bool,
}

impl CommandHandler {
    pub fn new(target_dir: PathBuf, force: bool, fail_on_exists: bool, dry_run: bool) -> Self {
        Self {
            target_dir,
            force,
            fail_on_exists,
            dry_run,
        }
    }

    pub async fn handle_basic(&self, template: Option<String>) -> Result<(), ZackstrapError> {
        let template_name = template.as_deref().unwrap_or("default");
        let generator = ConfigGenerator::new(self.target_dir.clone());

        if self.dry_run {
            println!(
                "{}",
                format!(
                    "üöÄ [DRY RUN] Would generate basic project configuration (template: {})...",
                    template_name
                )
                .blue()
            );
            generator.dry_run_basic_with_template(template_name).await?;
        } else {
            println!(
                "{}",
                format!(
                    "üöÄ Generating basic project configuration (template: {})...",
                    template_name
                )
                .green()
            );
            generator
                .generate_basic_with_template(self.force, self.fail_on_exists, template_name)
                .await?;
            println!(
                "{}",
                "‚úÖ Basic configuration files generated successfully!".green()
            );
        }
        Ok(())
    }

    pub async fn handle_ruby(&self, template: Option<String>) -> Result<(), ZackstrapError> {
        let template_name = template.as_deref().unwrap_or("default");
        let generator = ConfigGenerator::new(self.target_dir.clone());

        if self.dry_run {
            println!(
                "{}",
                format!(
                    "üíé [DRY RUN] Would generate Ruby project configuration (template: {})...",
                    template_name
                )
                .blue()
            );
            generator.dry_run_ruby_with_template(template_name).await?;
        } else {
            println!(
                "{}",
                format!(
                    "üíé Generating Ruby project configuration (template: {})...",
                    template_name
                )
                .green()
            );
            generator
                .generate_ruby_with_template(self.force, template_name)
                .await?;
            println!(
                "{}",
                "‚úÖ Ruby configuration files generated successfully!".green()
            );
        }
        Ok(())
    }

    pub async fn handle_python(&self, template: Option<String>) -> Result<(), ZackstrapError> {
        let template_name = template.as_deref().unwrap_or("default");
        let generator = ConfigGenerator::new(self.target_dir.clone());

        if self.dry_run {
            println!(
                "{}",
                format!(
                    "üêç [DRY RUN] Would generate Python project configuration (template: {})...",
                    template_name
                )
                .blue()
            );
            generator
                .dry_run_python_with_template(template_name)
                .await?;
        } else {
            println!(
                "{}",
                format!(
                    "üêç Generating Python project configuration (template: {})...",
                    template_name
                )
                .green()
            );
            generator
                .generate_python_with_template(self.force, template_name)
                .await?;
            println!(
                "{}",
                "‚úÖ Python configuration files generated successfully!".green()
            );
        }
        Ok(())
    }

    pub async fn handle_node(&self, template: Option<String>) -> Result<(), ZackstrapError> {
        let template_name = template.as_deref().unwrap_or("default");
        let generator = ConfigGenerator::new(self.target_dir.clone());

        if self.dry_run {
            println!(
                "{}",
                format!(
                    "üü¢ [DRY RUN] Would generate Node.js project configuration (template: {})...",
                    template_name
                )
                .blue()
            );
            generator.dry_run_node_with_template(template_name).await?;
        } else {
            println!(
                "{}",
                format!(
                    "üü¢ Generating Node.js project configuration (template: {})...",
                    template_name
                )
                .green()
            );
            generator
                .generate_node_with_template(self.force, template_name)
                .await?;
            println!(
                "{}",
                "‚úÖ Node.js configuration files generated successfully!".green()
            );
        }
        Ok(())
    }

    pub async fn handle_go(&self, template: Option<String>) -> Result<(), ZackstrapError> {
        let template_name = template.as_deref().unwrap_or("default");
        let generator = ConfigGenerator::new(self.target_dir.clone());

        if self.dry_run {
            println!(
                "{}",
                format!(
                    "ü¶Ä [DRY RUN] Would generate Go project configuration (template: {})...",
                    template_name
                )
                .blue()
            );
            generator.dry_run_go_with_template(template_name).await?;
        } else {
            println!(
                "{}",
                format!(
                    "ü¶Ä Generating Go project configuration (template: {})...",
                    template_name
                )
                .green()
            );
            generator
                .generate_go_with_template(self.force, template_name)
                .await?;
            println!(
                "{}",
                "‚úÖ Go configuration files generated successfully!".green()
            );
        }
        Ok(())
    }

    pub async fn handle_rust(&self, template: Option<String>) -> Result<(), ZackstrapError> {
        let template_name = template.as_deref().unwrap_or("default");
        let generator = ConfigGenerator::new(self.target_dir.clone());

        if self.dry_run {
            println!(
                "{}",
                format!(
                    "ü¶Ä [DRY RUN] Would generate Rust project configuration (template: {})...",
                    template_name
                )
                .blue()
            );
            generator.dry_run_rust_with_template(template_name).await?;
        } else {
            println!(
                "{}",
                format!(
                    "ü¶Ä Generating Rust project configuration (template: {})...",
                    template_name
                )
                .green()
            );
            generator
                .generate_rust_with_template(self.force, template_name)
                .await?;
            println!(
                "{}",
                "‚úÖ Rust configuration files generated successfully!".green()
            );
        }
        Ok(())
    }

    pub async fn handle_auto(&self) -> Result<(), ZackstrapError> {
        let generator = ConfigGenerator::new(self.target_dir.clone());

        if self.dry_run {
            println!("{}", "üîç [DRY RUN] Auto-detecting project type...".blue());
            let project_type = generator.detect_project_type().await?;
            self.handle_auto_dry_run(project_type, &generator).await?;
        } else {
            println!("{}", "üîç Auto-detecting project type...".blue());
            let project_type = generator.detect_project_type().await?;
            self.handle_auto_generate(project_type, &generator).await?;
        }
        Ok(())
    }

    async fn handle_auto_dry_run(
        &self,
        project_type: ProjectType,
        generator: &ConfigGenerator,
    ) -> Result<(), ZackstrapError> {
        match project_type {
            ProjectType::Ruby => {
                println!(
                    "{}",
                    "üíé [DRY RUN] Would generate Ruby project configuration...".blue()
                );
                generator.dry_run_ruby_with_template("default").await?;
            }
            ProjectType::Python => {
                println!(
                    "{}",
                    "üêç [DRY RUN] Would generate Python project configuration...".blue()
                );
                generator.dry_run_python_with_template("default").await?;
            }
            ProjectType::Node => {
                println!(
                    "{}",
                    "üü¢ [DRY RUN] Would generate Node.js project configuration...".blue()
                );
                generator.dry_run_node_with_template("default").await?;
            }
            ProjectType::Go => {
                println!(
                    "{}",
                    "ü¶Ä [DRY RUN] Would generate Go project configuration...".blue()
                );
                generator.dry_run_go_with_template("default").await?;
            }
            ProjectType::Rust => {
                println!(
                    "{}",
                    "ü¶Ä [DRY RUN] Would generate Rust project configuration...".blue()
                );
                generator.dry_run_rust_with_template("default").await?;
            }
            ProjectType::Basic => {
                println!(
                    "{}",
                    "üìÅ [DRY RUN] Would generate basic project configuration...".blue()
                );
                generator.dry_run_basic_with_template("default").await?;
            }
        }
        Ok(())
    }

    async fn handle_auto_generate(
        &self,
        project_type: ProjectType,
        generator: &ConfigGenerator,
    ) -> Result<(), ZackstrapError> {
        match project_type {
            ProjectType::Ruby => {
                println!(
                    "{}",
                    "üíé Detected Ruby project, generating configuration...".green()
                );
                generator.generate_ruby(self.force).await?;
                println!(
                    "{}",
                    "‚úÖ Ruby configuration files generated successfully!".green()
                );
            }
            ProjectType::Python => {
                println!(
                    "{}",
                    "üêç Detected Python project, generating configuration...".green()
                );
                generator
                    .generate_python_with_template(self.force, "default")
                    .await?;
                println!(
                    "{}",
                    "‚úÖ Python configuration files generated successfully!".green()
                );
            }
            ProjectType::Node => {
                println!(
                    "{}",
                    "üü¢ Detected Node.js project, generating configuration...".green()
                );
                generator
                    .generate_node_with_template(self.force, "default")
                    .await?;
                println!(
                    "{}",
                    "‚úÖ Node.js configuration files generated successfully!".green()
                );
            }
            ProjectType::Go => {
                println!(
                    "{}",
                    "ü¶Ä Detected Go project, generating configuration...".green()
                );
                generator
                    .generate_go_with_template(self.force, "default")
                    .await?;
                println!(
                    "{}",
                    "‚úÖ Go configuration files generated successfully!".green()
                );
            }
            ProjectType::Rust => {
                println!(
                    "{}",
                    "ü¶Ä Detected Rust project, generating configuration...".green()
                );
                generator
                    .generate_rust_with_template(self.force, "default")
                    .await?;
                println!(
                    "{}",
                    "‚úÖ Rust configuration files generated successfully!".green()
                );
            }
            ProjectType::Basic => {
                println!(
                    "{}",
                    "üìÅ Detected basic project, generating configuration...".green()
                );
                generator
                    .generate_basic(self.force, self.fail_on_exists)
                    .await?;
                println!(
                    "{}",
                    "‚úÖ Basic configuration files generated successfully!".green()
                );
            }
        }
        Ok(())
    }

    pub async fn handle_interactive(&self) -> Result<(), ZackstrapError> {
        let generator = ConfigGenerator::new(self.target_dir.clone());

        if self.dry_run {
            println!(
                "{}",
                "üéØ [DRY RUN] Interactive configuration setup...".blue()
            );
            println!("  Note: Dry run mode is not fully supported in interactive mode");
        } else {
            println!("{}", "üéØ Interactive configuration setup...".blue());
        }

        generator.interactive_setup().await?;
        Ok(())
    }

    pub fn handle_list(&self) {
        println!("{}", "üìã Available configuration files:".blue());
        println!("  ‚Ä¢ .editorconfig");
        println!("  ‚Ä¢ .prettierrc");
        println!("  ‚Ä¢ .ruby-version (Ruby projects)");
        println!("  ‚Ä¢ .node-version (Ruby projects)");
        println!("  ‚Ä¢ .rubocop.yml (Ruby projects)");
        println!("  ‚Ä¢ package.json (Ruby projects)");
        println!("  ‚Ä¢ .python-version (Python projects)");
        println!("  ‚Ä¢ pyproject.toml (Python projects)");
        println!("  ‚Ä¢ .flake8 (Python projects)");
        println!("  ‚Ä¢ requirements-dev.txt (Python projects)");
        println!("  ‚Ä¢ .nvmrc (Node.js projects)");
        println!("  ‚Ä¢ .eslintrc.js (Node.js projects)");
        println!("  ‚Ä¢ go.mod (Go projects)");
        println!("  ‚Ä¢ .golangci.yml (Go projects)");
        println!("  ‚Ä¢ rustfmt.toml (Rust projects)");
        println!("  ‚Ä¢ .clippy.toml (Rust projects)");
        println!("  ‚Ä¢ .cargo/config.toml (Rust projects)");
        println!("  ‚Ä¢ justfile (all projects)");
        println!();
        println!("üìã Available templates:");
        println!("  ‚Ä¢ Basic: default, google, airbnb");
        println!("  ‚Ä¢ Ruby: default, rails, sinatra, gem");
        println!("  ‚Ä¢ Python: default, django, flask");
        println!("  ‚Ä¢ Node.js: default, express, react");
        println!("  ‚Ä¢ Go: default, web, cli");
        println!("  ‚Ä¢ Rust: default, web, cli");
        println!();
        println!("üöÄ Available commands:");
        println!("  ‚Ä¢ basic - Generate basic project configs");
        println!("  ‚Ä¢ ruby - Generate Ruby project configs");
        println!("  ‚Ä¢ python - Generate Python project configs");
        println!("  ‚Ä¢ node - Generate Node.js project configs");
        println!("  ‚Ä¢ go - Generate Go project configs");
        println!("  ‚Ä¢ rust - Generate Rust project configs");
        println!("  ‚Ä¢ auto - Auto-detect project type");
        println!("  ‚Ä¢ interactive - Guided setup");
        println!("  ‚Ä¢ list - Show this help");
        println!();
        println!("‚öôÔ∏è  Global options:");
        println!("  ‚Ä¢ --force - Overwrite existing files");
        println!("  ‚Ä¢ --dry-run - Show what would be created");
        println!("  ‚Ä¢ --target DIR - Specify target directory");
    }
}
